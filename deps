
; k2 
; mul > k2 + len 
; a > k2, s, 
; e > s, k2 
; b > s 
; f > s 
; c > len, s 
; d > len, s 
; g > len, s 
; h > len, s, mul 
; 
; u > a, g, b, c 
; v > a, g, d, f 
; 
; w > u, v, mul, h,
; y > v, w, mul, g,

; x > e, f, c,
; z > e, f, c,
; 
; 
; a - x, z, mul, y, b,
; b - z, a, mul, d, h,
; 
; returns b + x


hashlen33to64:
; s = rdi, len = rsi
; 17 variables, s, len, mul, a-h, u-z
; k2 - 
; mul > k2 + len 
; a > k2, s,
; e > s, k2 - frees k2
; b > s 
; f > s 
; c > len, s | frees len / rsi (all future references to s will be offset by len)
; d > len, s 
; g > len, s 
; h > len, s, mul | frees s


occupied regs:
    a = r8, b = r9, c = r10, d = r11, e = r12, f = r13, g = r14, mul = r15
freed:
    rdi, rcx, rbx, rdx, rsi
; u > a, g, b, c 
; v > a, g, d, f 

occupied: 
    u = rcx, v = rdx
free:
    rsi, rbx

; w > u, v, mul, h,  | frees u
; y > v, w, mul, g, | frees g, v, and w 

occupied:
    w = r15
free:
    rcx, rbx, rdx, 

; x > e, f, c, | frees, e & f (z and x both use (e + f), preprocess e + f, here)
; z > e, f, c, | free c

occupied:
    x = r12, z = r13
free:
    rcx, rbx, rdx, r10


; a - x, z, mul, y, b, | frees x, z, 

occupied:
free:
    rcx, rbx, rdx, r10, r12, r13

free: 
    rcx, rbx, rdx, r12, r13
; b - z, a, mul, d, h, |

